{"ast":null,"code":"var _jsxFileName = \"/Users/gkloker/Desktop/React/src/App.js\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport Cita from \"./components/cita\";\n\nfunction App() {\n  // citas en local storage\n  let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n\n  if (!citasIniciales) {\n    citasIniciales = [];\n  } // arreglo de citas\n\n\n  const [citas, setCitas] = useState(citasIniciales); // useEffect realizar operaciones cuando el state cambia\n\n  useEffect(() => {\n    if (citasIniciales) {\n      localStorage.setItem(\"citas\", JSON.stringify(citas));\n    } else {\n      localStorage.setItem(\"citas\", JSON.stringify([]));\n    }\n  }, [citas, citasIniciales]); // funcion para tomar las citas actuales y actualizarlas\n\n  const crearCita = cita => {\n    setCitas([...citas, // copiamos las citas que hay\n    cita // agregamos la nueva cita\n    ]);\n  }; // funcion para eliminar una cita\n\n\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    setCitas(nuevasCitas);\n  }; // mensaje hay o no hay citas\n\n\n  const titulo = citas.length === 0 ? \"No hay citas\" : \"Administrar citas\";\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Administrador de Pacientes\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"one-half column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Formulario, {\n    crearCita: crearCita,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"one-half column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, titulo), citas.map(cita => /*#__PURE__*/React.createElement(Cita, {\n    key: cita.id,\n    cita: cita,\n    eliminarCita: eliminarCita,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/gkloker/Desktop/React/src/App.js"],"names":["React","Fragment","useState","useEffect","Formulario","Cita","App","citasIniciales","JSON","parse","localStorage","getItem","citas","setCitas","setItem","stringify","crearCita","cita","eliminarCita","id","nuevasCitas","filter","titulo","length","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;AAEA,SAASC,GAAT,GAAe;AACb;AACA,MAAIC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAArB;;AACA,MAAI,CAACJ,cAAL,EAAqB;AACnBA,IAAAA,cAAc,GAAG,EAAjB;AACD,GALY,CAOb;;;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACK,cAAD,CAAlC,CARa,CAUb;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,cAAJ,EAAoB;AAClBG,MAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BN,IAAI,CAACO,SAAL,CAAeH,KAAf,CAA9B;AACD,KAFD,MAEO;AACLF,MAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BN,IAAI,CAACO,SAAL,CAAe,EAAf,CAA9B;AACD;AACF,GANQ,EAMN,CAACH,KAAD,EAAQL,cAAR,CANM,CAAT,CAXa,CAmBb;;AACA,QAAMS,SAAS,GAAIC,IAAD,IAAU;AAC1BJ,IAAAA,QAAQ,CAAC,CACP,GAAGD,KADI,EACG;AACVK,IAAAA,IAFO,CAED;AAFC,KAAD,CAAR;AAID,GALD,CApBa,CA2Bb;;;AACA,QAAMC,YAAY,GAAIC,EAAD,IAAQ;AAC3B,UAAMC,WAAW,GAAGR,KAAK,CAACS,MAAN,CAAcJ,IAAD,IAAUA,IAAI,CAACE,EAAL,KAAYA,EAAnC,CAApB;AACAN,IAAAA,QAAQ,CAACO,WAAD,CAAR;AACD,GAHD,CA5Ba,CAiCb;;;AACA,QAAME,MAAM,GAAGV,KAAK,CAACW,MAAN,KAAiB,CAAjB,GAAqB,cAArB,GAAsC,mBAArD;AAEA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,eAGE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEP,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAIE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKM,MAAL,CADF,EAEGV,KAAK,CAACY,GAAN,CAAWP,IAAD,iBACT,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAEA,IAAI,CAACE,EAAhB;AAAoB,IAAA,IAAI,EAAEF,IAA1B;AAAgC,IAAA,YAAY,EAAEC,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAFH,CAJF,CADF,CAHF,CADF;AAmBD;;AAED,eAAeZ,GAAf","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport Cita from \"./components/cita\";\n\nfunction App() {\n  // citas en local storage\n  let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  // arreglo de citas\n  const [citas, setCitas] = useState(citasIniciales);\n\n  // useEffect realizar operaciones cuando el state cambia\n  useEffect(() => {\n    if (citasIniciales) {\n      localStorage.setItem(\"citas\", JSON.stringify(citas));\n    } else {\n      localStorage.setItem(\"citas\", JSON.stringify([]));\n    }\n  }, [citas, citasIniciales]);\n\n  // funcion para tomar las citas actuales y actualizarlas\n  const crearCita = (cita) => {\n    setCitas([\n      ...citas, // copiamos las citas que hay\n      cita, // agregamos la nueva cita\n    ]);\n  };\n\n  // funcion para eliminar una cita\n  const eliminarCita = (id) => {\n    const nuevasCitas = citas.filter((cita) => cita.id !== id);\n    setCitas(nuevasCitas);\n  };\n\n  // mensaje hay o no hay citas\n  const titulo = citas.length === 0 ? \"No hay citas\" : \"Administrar citas\";\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita} />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map((cita) => (\n              <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}